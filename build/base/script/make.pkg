#!/bin/bash

set -e 
SEP="+"

# make.pkg
# ========
# R.J.Barnes
#
# Purpose:
#
# Builds a software package based on project name and project.
#
# Syntax:
#
# make.pkg -m project package [version]
#
# Description:
#
# Builds a software package based on name and project.

##############################################################################


pkgflg=""
makeflg=""

while test ${#} -ne 0
do

  case ${1} in
  "-sh") pkgflg="sh"
  ;;
   "-make") makeflg="make"
  ;;
  *)
    break
  ;;
  esac
  shift 1
done

prj=${1}
pkg=${2}

ver=""

if test ${#} -gt 2
then
   ver=${3}
fi

##############################################################################

#  Test for valid command line

##############################################################################

if test -z "${pkg}"
then
  echo "make.pkg project package [version]"
  exit 1
fi

package=${BUILD}/${prj}/package/${pkg}

if test ! -d ${package}
then
  echo "Failed to locate package"
  exit 1
fi

if test -n "${ver}"
then
  vstr="version."${ver}
else
   vstr="HEAD"
fi

pid=`git --git-dir ${package}/.git log ${vstr} | \
     head -1 | cut -f 2 -d' '`

tag=`git --git-dir ${package}/.git describe --always ${pid}`

if test "${tag%%.*}" = "version"
then
  ver=${tag#version.}
else
  ver="x.x" 
fi

yrval=`date +%Y`

rpkg=${HOMEPATH}/rpkg.tmp

rm -fr ${rpkg}
mkdir -p ${rpkg}

############################################################################

# makecode
# 
# Compile source code and binaries

############################################################################

makecomponent() {

  compile=${1}
  project=${2}
  component=${3}
  type=${4}
  mode=${5} 
 
  if test "${compile}" = "doc"
  then
   src=${rpkg}/rst/${component}

   if test ! -d ${src} 
   then
     src=${src}.*
   fi

   if test "${type}" = "doc"
   then
      make.doc.rfc ${rpkg}/rst ${project}
      if test -d ${src}/tutorial 
      then
        find ${src}/tutorial -name "*.doc.xml" \
       -  exec make.doc.tutorial {} \;
      fi
    fi

    if test "${type}" = "lib"
    then
      find ${src} -name "*.doc.xml" -exec make.doc.lib {} \;
    fi

    if test "${type}" = "bin"
    then
     find ${src} -name "*.doc.xml" -exec make.doc.bin {} \; 
    fi 
  else
    opt=""
    ctmp=${compile}

    if test "${compile}" = "hdr"
    then
      ctmp="lib"
      opt="-t hdr"
    fi

    if test "${ctmp}" != "${type}" 
    then
      return 0
    fi

    src=${rpkg}/rst/${component}

    if test "${mode}" = "stdin"
    then
      echo ${component##*/} ${opt}
      echo ${component##*/} | makeall ${opt} \
           ${src%/*} stdin 
    else
      if test ! -d ${src}
      then
         src=${src}.*
      fi
      makeall ${opt} ${src}   
    fi
  fi
  return 0
}

############################################################################

# makebuild
#
# Make build infrastructure

############################################################################

makebuild() {

  loct=${1}
  type=${2}
  path=${rpkg}/rst/codebase/base/src.${type}/${loct}
  if test ! -d ${path}
  then 
    path=${path}".*"
  fi

  if test "${type}" = lib
  then
    mkfile=`find ${path} -maxdepth 2 -name "makefile" | sort | tail -1 `
  else
    mkfile=`find ${path} -maxdepth 1 -name "makefile" | sort | tail -1` 
  fi

  pwd=${PWD}
  
  make -C ${mkfile%%/makefile} clean
  make -C ${mkfile%%/makefile}
  
  return 0
}

##############################################################################

# buildelement
#
# Extracts the source code elements

##############################################################################

buildelement() {

  element=${1}
  id=${2}
  license=${3}

  if test "${id}" = "ID"
  then
     id=${pid}
  fi
 
  tag=`git --git-dir ${HOMEPATH}/${element}/.git describe --always ${id}`

  path=${element}

  if test "${tag%%.*}" = "version"
  then
     path=${element}.${tag#version.}
  fi

  echo ${path} 

  mkdir -p ${rpkg}/rst/${path}
  mkdir -p ${rpkg}/rst/${path}/.rst

  git --git-dir ${HOMEPATH}/${element}/.git archive ${id} | \
      tar -C ${rpkg}/rst/${path} -xf - 
  
  git --git-dir ${HOMEPATH}/${element}/.git log ${id} > \
      ${rpkg}/rst/${path}/.rst/log
  
  echo ${id} > ${rpkg}/rst/${path}/.rst/id
 
  if test "${tag%%.*}" = "version"
  then
     echo ${tag} > ${rpkg}/rst/${path}/.rst/version
  fi
 
  # Add license

  l=${rpkg}/rst/${path}/LICENSE.txt  

  if test ! -s ${l}
  then
    l=${license}
  fi

  if test -s ${l}
  then
    flist=`find ${rpkg}/rst/${path} -name "*.h" -or -name "*.c"`
    for fname in ${flist}
    do
      cat ${fname} | addtext ${l} > ${fname}~
      mv ${fname}~ ${fname}
    done
  fi

  return 0

}


##############################################################################

#  Build component

##############################################################################


buildcomponent() {

  SEP="+"
  
  compile=${1}
  fname=${2}
  cmplst=`cat ${fname} | tr " " "${SEP}" `
 
  for lval in ${cmplst}
  do
    tmp=`echo ${lval} | tr "${SEP}" " "`
    prm=${tmp%%#*} 
    if test -z "${prm}"; then continue; fi
    makecomponent ${compile} ${prm}
  done
  return 0
}

##############################################################################

#  Generate inventory

##############################################################################

makeinventory() {
 pwd=${PWD}
 cd ${rpkg}/rst
 find .
 cd ${pwd}
 return 0
}

##############################################################################

#  Create tar file

##############################################################################

maketar () {
  pwd=${PWD}
  cd ${rpkg}
  tar -cvf rpkg.tar rst
  cd ${pwd}
  return 0
}

##############################################################################

#  Replace text tags

##############################################################################

addtag () {
  fname=${1}
  cat ${fname} | addtext -t "\$version\$" -r "${ver}" | \
  addtext -t "\$project\$" -r "${prj}" | \
  addtext -t "\$package\$" -r "${pkg}" | \
  addtext  -t "\$date\$" -r "${yrval}"
  return 0
}



##############################################################################

#  Build directory structure and extract package information

##############################################################################

mkdir -p ${rpkg}/tmp
mkdir -p ${rpkg}/rst

echo "+ Extracting package information"
echo "+--------------------------------------------"

git --git-dir ${BUILD}/${prj}/package/${pkg}/.git archive ${pid} | \
    tar -C ${rpkg}/tmp -xvf - 

echo "+--------------------------------------------"

##############################################################################

#  Start generating the distribution from the id list

##############################################################################

if test ! -s "${rpkg}/tmp/id.txt"
then
  echo "Failed to locate package elements"
  exit 1
fi

echo "+ Extracting package elements"
echo "+--------------------------------------------"

lfile=""

if test -s ${rpkg}/tmp/LICENSE.tag
then
  addtag ${rpkg}/tmp/LICENSE.tag > ${rpkg}/tmp/LICENSE.tmp
  lfile=${rpkg}/tmp/LICENSE.tmp
fi

ellst=`cat ${rpkg}/tmp/id.txt | tr " " "${SEP}" `

for el in ${ellst}
do
  tmp=`echo ${el} | tr "${SEP}" " "`
  prm=${tmp%%#*} 
  if test -z "${prm}"; then continue; fi
  buildelement ${prm} ${lfile}
done

echo "+--------------------------------------------"

##############################################################################

#  Make code

##############################################################################


if test -n "${makeflg}"
then
  export BINPATH=${rpkg}/rst/build/base/bin
  export LIBPATH=${rpkg}/rst/build/base/lib
  export IPATH=${rpkg}/rst/build/base/include

  mkdir -p ${LIBPATH}
  mkdir -p ${BINPATH}
  mkdir -p ${IPATH}

  liblist="xml/xml xml/xmldb xml/tagdb xml/xmldoclib \
         task/option httpd/rscript"
  binlist="xmldoc/xmldoc xmldoc/xmldoc xmldoc/scdoc \
         build/addtext build/maketree build/makeall"

  for libname in ${liblist}
  do
    makebuild ${libname} lib
  done
  
  for binname in ${binlist}
  do
    makebuild ${binname} bin
  done

  export BINPATH=${rpkg}/rst/bin
  export LIBPATH=${rpkg}/rst/lib
  export IPATH=${rpkg}/rst/include
  export DOCPATH=${rpkg}/rst/doc

  export USR_BINPATH=${rpkg}/rst/usr/bin
  export USR_LIBPATH=${rpkg}/rst/usr/lib
  export USR_IPATH=${rpkg}/rst/usr/include

  mkdir -p ${LIBPATH}
  mkdir -p ${BINPATH}
  mkdir -p ${IPATH}
  mkdir -p ${DOCPATH}

  mkdir -p ${USR_LIBPATH}
  mkdir -p ${USR_BINPATH}
  mkdir -p ${USR_IPATH}

  buildcomponent hdr ${rpkg}/tmp/build.txt
  buildcomponent lib ${rpkg}/tmp/build.txt
  buildcomponent bin ${rpkg}/tmp/build.txt  
  buildcomponent doc ${rpkg}/tmp/build.txt
  make.doc.frame
fi

##############################################################################

#  Generate housekeeping

##############################################################################

echo "+ Generating houskeeping"
echo "+--------------------------------------------"

mkdir -p ${rpkg}/rst/log
makeinventory | tee -a ${rpkg}/rst/log/${prj}-${pkg}.${ver}.inventory

echo "+--------------------------------------------"

##############################################################################

#  Copy profile

##############################################################################

echo "+ Copying package profiles"
echo "+--------------------------------------------"

if test -d ${rpkg}/tmp/profile
then
  flist=`find "${rpkg}/tmp/profile" -type f`
  for fname in ${flist}
  do
     ftail=${fname##*/profile.}
     cp -v ${fname} ${rpkg}/rst/profile.${prj}-${pkg}.${ftail} 
  done
fi


echo "+--------------------------------------------"

##############################################################################

#  Copy extra files

##############################################################################

echo "+ Copying extra files"
echo "+--------------------------------------------"

if test -d ${rpkg}/tmp/extra
then
   cp -vr ${rpkg}/tmp/extra/* ${rpkg}/rst
fi

echo "+--------------------------------------------"

##############################################################################

#  Package up the archive

##############################################################################

echo "+ Creating package archive"
echo "+--------------------------------------------"

maketar

tarlist="rpkg.tar"

flist=`find "${rpkg}/tmp" -name "rpkg.*.sh" \
        -o -name "rpkg.*.txt"`
 
for fname in ${flist}
 do
   addtag ${fname} > ${rpkg}/${fname##*/}
   
  if test "${fname##*.}" = "sh"
   then
     chmod a+x ${rpkg}/${fname##*/}
   fi
   tarlist="${tarlist} ${fname##*/}"
done

if test -f "${rpkg}/tmp/README.txt"
then 
  addtag "${rpkg}/tmp/README.txt" > \
      ${rpkg}/README.${prj}-${pkg}.${ver}.txt
  tarlist="${tarlist} README.${prj}-${pkg}.${ver}.txt"
  cp  ${rpkg}/README.${prj}-${pkg}.${ver}.txt .
fi
if test -f "${rpkg}/tmp/LICENSE.txt"
then
  addtag "${rpkg}/tmp/LICENSE.txt" > \
  ${rpkg}/LICENSE.${prj}-${pkg}.${ver}.txt
  tarlist="${tarlist} LICENSE.${prj}-${pkg}.${ver}.txt"
  cp ${rpkg}/LICENSE.${prj}-${pkg}.${ver}.txt .
fi


echo "+--------------------------------------------"

############################################################################

# Make self-extracting archive

############################################################################

echo "+ Making final package"
echo "+--------------------------------------------"

pkgfname=${prj}-${pkg}.${ver}

if test -n "${makeflg}" 
then
  pkgfname=${pkgfname}.${SYSTEM}
fi

if test -n "${pkgflg}"
then 
  let lnecnt="`cat ${BUILD}/base/script/rpkg.se | wc -l`"
  let lnecnt=$lnecnt+1
  cat ${BUILD}/base/script/rpkg.se | addtext -t "\$lnecnt\$" \
     -r "${lnecnt}" > ${pkgfname}.sh
  tar -cvz -C ${rpkg} ${tarlist} >> ${pkgfname}.sh
  chmod a+x ${pkgfname}.sh
else
  tar -cv -C ${rpkg} ${tarlist} >> ${pkgfname}.tar
fi
  
echo "+--------------------------------------------"

rm -fr ${rpkg}
exit 0




